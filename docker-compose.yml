version: '3.8'

volumes:
  auth_db_data:
  survey_db_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    # --- THIS IS THE KEY FIX ---
    healthcheck:
      test: "cub kafka-ready -b kafka:9092 1"
      interval: 10s
      timeout: 5s
      retries: 5

  auth-db:
    image: postgres:14-alpine
    container_name: auth-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_db
    # --- UPDATED: Mount the init script and the named volume ---
    volumes:
      - ./init-db/auth:/docker-entrypoint-initdb.d
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  survey-db:
    image: postgres:14-alpine
    container_name: survey-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: survey_db
    # --- UPDATED: Mount the init script and the named volume ---
    volumes:
      - ./init-db/survey:/docker-entrypoint-initdb.d
      - survey_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d survey_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  tenant-manager:
    build: ./tenant-manager
    container_name: tenant-manager
    ports:
      - "3003:3000" # Expose on a new port
    depends_on:
      auth-db:
        condition: service_healthy
      survey-db:
        condition: service_healthy
    environment:
      # It needs credentials to connect to ALL databases
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      # We provide the hosts as env vars, though they are hardcoded in schemas.json for this example.
      # A more advanced setup would read these from the environment too.
      AUTH_DB_HOST: auth-db
      SURVEY_DB_HOST: survey-db

  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "3001:3000"
    depends_on:
      kafka:
        condition: service_started
      auth-db:
        condition: service_healthy
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_db
      POSTGRES_HOST: auth-db
      KAFKA_BROKER: kafka:9092

  survey-service:
    build: ./survey-service
    container_name: survey-service
    ports:
      - "3002:3000"
    depends_on:
      kafka:
        condition: service_started
      survey-db:
        condition: service_healthy
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: survey_db
      POSTGRES_HOST: survey-db
      KAFKA_BROKER: kafka:9092
