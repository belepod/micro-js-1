version: '3.8'

volumes:
  auth_db_data:
  survey_db_data:
  tenant_db_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: "cub kafka-ready -b kafka:9092 1"
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  tenant-db:
    image: postgres:14-alpine
    container_name: tenant-db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tenant_db
    volumes:
      - ./init-db/tenant:/docker-entrypoint-initdb.d
      - tenant_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d tenant_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-db:
    image: postgres:14-alpine
    container_name: auth-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_db
    volumes:
      - ./init-db/auth:/docker-entrypoint-initdb.d
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  survey-db:
    image: postgres:14-alpine
    container_name: survey-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: survey_db
    volumes:
      - ./init-db/survey:/docker-entrypoint-initdb.d
      - survey_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d survey_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  tenant-manager:
    build:
      context: .
      dockerfile: tenant-manager/Dockerfile
    container_name: tenant-manager
    ports:
      - "3003:3000"
    depends_on:
      tenant-db: 
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tenant_db
      POSTGRES_HOST: tenant-db 
      KAFKA_BROKER: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      ADMIN_USER: admin
      ADMIN_PASSWORD: password123

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "3001:3000"
    depends_on:
      kafka:
        condition: service_started
      auth-db:
        condition: service_healthy
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_db
      POSTGRES_HOST: auth-db
      KAFKA_BROKER: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      TENANT_MANAGER_URL: http://tenant-manager:3000

  survey-service:
    build:
      context: .
      dockerfile: survey-service/Dockerfile
    container_name: survey-service
    ports:
      - "3002:3000"
    depends_on:
      kafka:
        condition: service_started
      survey-db:
        condition: service_healthy
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: survey_db
      POSTGRES_HOST: survey-db
      KAFKA_BROKER: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081

  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: admin-panel
    ports:
      - "80:80" # Map host port 80 to container port 80
    depends_on:
      - tenant-manager # Optional, but good practice to ensure backend is up
